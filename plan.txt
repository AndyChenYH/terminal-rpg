goal of game: rpg game with map, combat, quest system, crafting system, economy
doesn't have to have complex actions, but interesting content is key
maybe get jay to write some story lines for me
regularly update the game with new content (map area, quests, weapons & gears) to make it fun

remember to make plenty of comments!

game storyline:
	npc vibing along, monster tries to kill them & village
	player has conscious and unconscious
		internal dialogue, giving hints and ques
		unconscious is big IQ & schemes against player
			unconsioucs wants to kill bad guy so IT can be the bad guy
	seemingly innocent at first, then gets darker because influence from unconscious
		mission become more villanous and evil
		constantly tries to explain its evil actions
	unconscious is the tutorial; teaches player how to craft
-load image from txt file & draw

file reading:
	*will use map<string name, Object> to map to in-code objects referenced in files
		*for example, mp["NPCJoe"] would map to an NPC called joe
		*allows file to reference things using string


development plan:
*world, camera, and side maps
	*camera displays player near the center
	*player movement		
	*implement map class
	*make a portal into another map
	*read in map from txt file
		*including look, and passibility in matrix format
		*use HTML style <> </> tags with nested functions
		*read in resource nodes from map

		*read in portals 
			*give map a name to reference in treemap
		*read in NPC
			*read in dialogue triggers
			*generate lambda function inline
			*can give or receive NONE; make sure to check with conditional
			*can only give or receive one type of item
				*if you want multiple items...do it in another dialogue


-refactor file reading: without the use of lambdas

*npc class
	*name, dialogue triggers when acted upon
	*dialogue system 
		*dialogue class with member variables string, trigger lambda function
		*disables usual key presses when isTalking is true
			*all input is routed with conditional
		*linear progression by pressing 'enter'
			*confirmation of quest is pressing 'enter'
			*player can exit at any time with 'backspace'
		*string is the dialogue description
		*the lambda can give the player a quest

*accept quests from npc

item:
-items of different types
	*attributes: name, damage, amount, AOE pattern
	-resources
	-weapons
		-will attack where player is facing
		-plays animation for a few seconds
	-clothes that add to different stats
	*tools for harvesting resources
	*different items will be determined through class instances
		*stored in treemap<name, item>
	*read in preset items from txt file
	*NONE item to repersent blank space; presistent inventory organization



player:
*stored in a player class
*allow extensibility into multiple players in the future
*player and inventory system
	*player interaction
		*implement player facing
		*collecting natural resources
			*map display resources
			*resource nodes				
			*disappears after harvesting and regrows in a while
		*talking with npc
			*sets game state to be talking, so player can't move
				*if is talking with npc, display current dialogue box on the right
					*reroute inputs
					*if '`' is detected, stop talking
					*if ' ' is detected, advance to the next dialogue
			*implement dialogues & npc display
	*draw better looking inventory
		*default view is a bunch of boxes with Item.look character
		*allow player to press 'i' to enter view inventory mode
		-while in view inventory mode, player can use arrow keys to navigate around inventory
			-displays a specific description of item
		*hotbar
			*4 items that the player can instantly access using 1-4 number keys
		

map:
*allow player to move around in a small section of it
	*anything outside of this small camera will not be processed
		*aka enemies will not move, attacks will not go that far
*stored in a large array
	*portals (to other locations or other maps) and npcs and resource nodes are stored in treemap
	*each is a Block object, containing passability
		*block looks is simple ascii. some blocks allow players to pass, some don't

*allows the player to interact with its objects
*has buildings that the player could go into
	*each separate building has its own map data stored in currentMap

-has npc that the player could interact with
	-npc do not move
	-can buy things from npc, who has unlimited inventory
	-can sell things to npc
	-can take quests from the npc
-quests
	-can be taken from npc
	-gives rewards automatically when completed
	-quest class with string(quest description), and lambda function that checks for completion & gives rewards
	-when taken: passes lambda function to player that will be run once in a while
		-checks for completion status & reward if necessary
			-function<bool(Player*)>
			-returns true and false based on quest completion status & whether its ok to remove quest
			-modifies player stats as needed
			-every few frames, loops through list of quests & runs lambda function
	-types:
		-killing monsters
		-collecting natural resources
		-visiting a npc
-enemies
	-only attacks when next to player
	-health, name, look
	-have preset types, loaded through enemies.txt AML file
-combat
	*attacks are laid out in a 3x3 grid-like shape with some square being empty
	*enemies use pathfinding to walk to a square next to the player to attack

	*allows the player to attack in the direction they are facing
	-attack animation can play out over several frames
		-damage taken instantly
-miscellaneous
	-colors
		-different types of interactable things have their own colors
	-animation
		-consists of images and displaying durations
	-chat
		-ingame information, npc dialogue
		-stored in queue
-crafting
	-select from a list of recipes and waiting for a while for crafting to complete
